# Code generated by schema2code at 2025-08-26 22:17:54. DO NOT EDIT.


from typing import List, Dict, Optional, Any, Union
from datetime import datetime, date, time, timedelta
from .message_type import MessageType
from .socket_stage_type import SocketStageType
from pydantic import BaseModel, Field, AnyUrl, EmailStr, conint, confloat



class SocketMessage(BaseModel):
    """SocketMessage represents a response sent over WebSocket"""
    id: str = Field(..., description="Unique identifier for the message")
    """Unique identifier for the message"""
    content: Optional[str] = Field(default=None, description="Content of the response")
    """Content of the response"""
    error: Optional[str] = Field(default=None, description="Error message if any")
    """Error message if any"""
    state: SocketStageType = Field(..., description="State of the chat session")
    """State of the chat session"""
    session_id: str = Field(..., description="Session identifier")
    """Session identifier"""
    timestamp: datetime = Field(..., description="Timestamp of the response")
    """Timestamp of the response"""
    type: MessageType = Field(..., description="Type of message")
    """Type of message"""
    progress: Optional[int] = Field(default=None, description="Progress percentage of the response, if applicable", ge=0, le=100)
    """Progress percentage of the response, if applicable"""
    data: Optional[List[Any]] = Field(default=None, description="Additional data related to the response, if any")
    """Additional data related to the response, if any"""
    conversation_id: Optional[int] = Field(default=None, description="Identifier of the conversation associated with the response")
    """Identifier of the conversation associated with the response"""

    class Config:
        extra = "ignore"