# Code generated by schema2code at 2025-08-03 11:47:17. DO NOT EDIT.


from typing import List, Dict, Optional, Any, Union
from datetime import datetime, date, time, timedelta
from .socket_stage_type import SocketStageType
from .message_type import MessageType
from pydantic import BaseModel, Field, AnyUrl, EmailStr



"""SocketMessage represents a response sent over WebSocket"""
class SocketMessage(BaseModel):
    # Unique identifier for the message
    id: str = Field(..., description="Unique identifier for the message")
    # Content of the response
    content: Optional[str] = Field(None, description="Content of the response")
    # Error message if any
    error: Optional[str] = Field(None, description="Error message if any")
    # State of the chat session
    state: SocketStageType = Field(..., description="State of the chat session")
    # Session identifier
    session_id: str = Field(..., description="Session identifier")
    # Timestamp of the response
    timestamp: datetime = Field(..., description="Timestamp of the response")
    # Type of message
    type: MessageType = Field(..., description="Type of message")
    # Progress percentage of the response, if applicable
    progress: Optional[int] = Field(None, description="Progress percentage of the response, if applicable")
    # Additional data related to the response, if any
    data: Optional[List[Any]] = Field(None, description="Additional data related to the response, if any")
    # Identifier of the conversation associated with the response
    conversation_id: Optional[int] = Field(None, description="Identifier of the conversation associated with the response")

    class Config:
        extra = "ignore"