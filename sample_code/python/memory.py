# Code generated by schema2code at 2025-08-03 11:47:13. DO NOT EDIT.


from typing import List, Dict, Optional, Any, Union
from datetime import datetime, date, time, timedelta
from .memory_fragment import MemoryFragment
from pydantic import BaseModel, Field, AnyUrl, EmailStr



"""Memory represents a grouped memory for a user, which can be a summary or a question-answer pair"""
class Memory(BaseModel):
    # Fragments of memory content
    fragments: List[MemoryFragment] = Field(..., description="Fragments of memory content")
    # Source type of the memory
    source: str = Field(..., description="Source type of the memory")
    # Timestamp of when the memory was created
    created_at: datetime = Field(..., description="Timestamp of when the memory was created")
    # Similarity score from vector search
    similarity: float = Field(..., description="Similarity score from vector search")
    # Id of the source document or conversation
    source_id: int = Field(..., description="Id of the source document or conversation")
    # Id of the conversation this memory belongs to
    conversation_id: Optional[int] = Field(None, description="Id of the conversation this memory belongs to")

    class Config:
        extra = "ignore"