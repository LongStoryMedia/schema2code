# Code generated by schema2code at 2025-08-26 22:17:50. DO NOT EDIT.


from typing import List, Dict, Optional, Any, Union
from datetime import datetime, date, time, timedelta
from .memory_fragment import MemoryFragment
from .memory_source import MemorySource
from .message_role import MessageRole
from pydantic import BaseModel, Field, AnyUrl, EmailStr, conint, confloat



class Memory(BaseModel):
    """Memory represents a grouped memory for a user, which can be a summary or a question-answer pair"""
    fragments: List[MemoryFragment] = Field(..., description="Fragments of memory content")
    """Fragments of memory content"""
    source: MemorySource = Field(..., description="Source of the memory")
    """Source of the memory"""
    created_at: datetime = Field(..., description="Timestamp of when the memory was created")
    """Timestamp of when the memory was created"""
    similarity: float = Field(..., description="Similarity score from vector search")
    """Similarity score from vector search"""
    source_id: int = Field(..., description="Id of the source document or conversation")
    """Id of the source document or conversation"""
    conversation_id: Optional[int] = Field(default=None, description="Id of the conversation this memory belongs to")
    """Id of the conversation this memory belongs to"""

    class Config:
        extra = "ignore"