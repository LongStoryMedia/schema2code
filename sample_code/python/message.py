# Code generated by schema2code at 2025-08-26 22:17:50. DO NOT EDIT.


from typing import List, Dict, Optional, Any, Union
from datetime import datetime, date, time, timedelta
from .message_content import MessageContent
from .message_content_type import MessageContentType
from .message_role import MessageRole
from pydantic import BaseModel, Field, AnyUrl, EmailStr, conint, confloat



class Message(BaseModel):
    """Message represents a single exchange in the conversation"""
    role: MessageRole = Field(..., description="Role of the message sender (e.g., user, assistant)")
    """Role of the message sender (e.g., user, assistant)"""
    content: List[MessageContent] = Field(..., description="Content of the message")
    """Content of the message"""
    tool_calls: Optional[List[Dict[str, Any]]] = Field(default=None, description="Optional tool calls associated with the message")
    """Optional tool calls associated with the message"""
    thinking: Optional[str] = Field(default=None, description="Optional thinking process of the model, if applicable")
    """Optional thinking process of the model, if applicable"""
    id: Optional[int] = Field(default=None, description="Unique identifier for the message")
    """Unique identifier for the message"""
    created_at: Optional[datetime] = Field(default=None, description="Timestamp of when the message was created")
    """Timestamp of when the message was created"""
    conversation_id: int = Field(..., description="Id of the conversation this message belongs to")
    """Id of the conversation this message belongs to"""

    class Config:
        extra = "ignore"