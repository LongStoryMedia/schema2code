# Code generated by schema2code at 2025-08-26 22:17:53. DO NOT EDIT.


from typing import List, Dict, Optional, Any, Union
from datetime import datetime, date, time, timedelta
from .research_plan import ResearchPlan
from .research_question import ResearchQuestion
from pydantic import BaseModel, Field, AnyUrl, EmailStr, conint, confloat



class ResearchTask(BaseModel):
    """ResearchTask represents a deep research task"""
    id: int = Field(..., description="Unique identifier for the research task")
    """Unique identifier for the research task"""
    user_id: str = Field(..., description="Id of the user who owns the task")
    """Id of the user who owns the task"""
    query: str = Field(..., description="Original research query")
    """Original research query"""
    model: str = Field(..., description="Model used for the research")
    """Model used for the research"""
    conversation_id: Optional[Any] = Field(default=None, description="Id of the conversation associated with this task if any")
    """Id of the conversation associated with this task if any"""
    status: str = Field(..., description="Current status of the research task")
    """Current status of the research task"""
    error_message: Optional[Any] = Field(default=None, description="Error message if task failed")
    """Error message if task failed"""
    plan: Optional[str] = Field(default=None, description="Research plan with sub-questions")
    """Research plan with sub-questions"""
    results: Optional[List[str]] = Field(default=None, description="Collected results from the research")
    """Collected results from the research"""
    created_at: datetime = Field(..., description="Timestamp of when the task was created")
    """Timestamp of when the task was created"""
    updated_at: datetime = Field(..., description="Timestamp of when the task was last updated")
    """Timestamp of when the task was last updated"""
    completed_at: Optional[Any] = Field(default=None, description="Timestamp of when the task was completed")
    """Timestamp of when the task was completed"""

    class Config:
        extra = "ignore"