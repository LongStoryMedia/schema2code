# Code generated by schema2code at 2025-08-03 11:47:16. DO NOT EDIT.


from typing import List, Dict, Optional, Any, Union
from datetime import datetime, date, time, timedelta
from .research_plan import ResearchPlan
from .research_question import ResearchQuestion
from pydantic import BaseModel, Field, AnyUrl, EmailStr



"""ResearchTask represents a deep research task"""
class ResearchTask(BaseModel):
    # Unique identifier for the research task
    id: int = Field(..., description="Unique identifier for the research task")
    # Id of the user who owns the task
    user_id: str = Field(..., description="Id of the user who owns the task")
    # Original research query
    query: str = Field(..., description="Original research query")
    # Model used for the research
    model: str = Field(..., description="Model used for the research")
    # Id of the conversation associated with this task if any
    conversation_id: Optional[Any] = Field(None, description="Id of the conversation associated with this task if any")
    # Current status of the research task
    status: str = Field(..., description="Current status of the research task")
    # Error message if task failed
    error_message: Optional[Any] = Field(None, description="Error message if task failed")
    # Research plan with sub-questions
    plan: Optional[str] = Field(None, description="Research plan with sub-questions")
    # Collected results from the research
    results: Optional[List[str]] = Field(None, description="Collected results from the research")
    # Timestamp of when the task was created
    created_at: datetime = Field(..., description="Timestamp of when the task was created")
    # Timestamp of when the task was last updated
    updated_at: datetime = Field(..., description="Timestamp of when the task was last updated")
    # Timestamp of when the task was completed
    completed_at: Optional[Any] = Field(None, description="Timestamp of when the task was completed")

    class Config:
        extra = "ignore"