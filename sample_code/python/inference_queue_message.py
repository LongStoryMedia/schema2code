# Code generated by schema2code at 2025-08-03 11:47:12. DO NOT EDIT.


from typing import List, Dict, Optional, Any, Union
from datetime import datetime, date, time, timedelta
from pydantic import BaseModel, Field, AnyUrl, EmailStr



"""Schema for an inference request in the LLM system"""
class InferenceQueueMessage(BaseModel):
    # Unique identifier for the request and response correlation
    correlation_id: str = Field(..., description="Unique identifier for the request and response correlation")
    # Priority of the request
    priority: int = Field(..., description="Priority of the request")
    # Timestamp of the request
    timestamp: datetime = Field(..., description="Timestamp of the request")
    # Payload containing the inference request details
    payload: Optional[Any] = Field(None, description="Payload containing the inference request details")
    # Type of the request, e.g., "chat", "image_generation", etc.
    task: str = Field(..., description="Type of the request, e.g., \"chat\", \"image_generation\", etc.")
    # Required memory in bytes for processing the request
    memory_required: float = Field(..., description="Required memory in bytes for processing the request")
    # type of message (e.g. "request", "status", "result")
    type: Optional[str] = Field(None, description="type of message (e.g. \"request\", \"status\", \"result\")")

    class Config:
        extra = "ignore"