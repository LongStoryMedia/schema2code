# Code generated by schema2code at 2025-08-26 22:17:48. DO NOT EDIT.


from typing import List, Dict, Optional, Any, Union
from datetime import datetime, date, time, timedelta
from pydantic import BaseModel, Field, AnyUrl, EmailStr, conint, confloat



class InferenceQueueMessage(BaseModel):
    """Schema for an inference request in the LLM system"""
    correlation_id: str = Field(..., description="Unique identifier for the request and response correlation")
    """Unique identifier for the request and response correlation"""
    priority: int = Field(..., description="Priority of the request")
    """Priority of the request"""
    timestamp: datetime = Field(..., description="Timestamp of the request")
    """Timestamp of the request"""
    payload: Optional[Any] = Field(default=None, description="Payload containing the inference request details")
    """Payload containing the inference request details"""
    task: str = Field(..., description="Type of the request, e.g., \"chat\", \"image_generation\", etc.")
    """Type of the request, e.g., \"chat\", \"image_generation\", etc."""
    memory_required: float = Field(..., description="Required memory in bytes for processing the request")
    """Required memory in bytes for processing the request"""
    type: Optional[str] = Field(default=None, description="type of message (e.g. \"request\", \"status\", \"result\")")
    """type of message (e.g. \"request\", \"status\", \"result\")"""

    class Config:
        extra = "ignore"