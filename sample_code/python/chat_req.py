# Code generated by schema2code at 2025-08-03 11:47:09. DO NOT EDIT.


from typing import List, Dict, Optional, Any, Union
from datetime import datetime, date, time, timedelta
from .model_parameters import ModelParameters
from .message import Message
from pydantic import BaseModel, Field, AnyUrl, EmailStr



"""ChatReq represents a request to the Ollama API"""
class ChatReq(BaseModel):
    # Model name, used internally only to set the model name in the request to ollama based on the profile
    model: str = Field(..., description="Model name, used internally only to set the model name in the request to ollama based on the profile")
    # Messages to send to the model, each message is a struct with role and content
    messages: List[Message] = Field(..., description="Messages to send to the model, each message is a struct with role and content")
    # If true, the response will be streamed back as a series of events
    stream: bool = Field(..., description="If true, the response will be streamed back as a series of events")
    # The format to return a response in. Format can be json or a JSON schema
    format: Optional[Dict[str, Any]] = Field(None, description="The format to return a response in. Format can be json or a JSON schema")
    # UI sends camelCase
    conversation_id: Optional[int] = Field(None, description="UI sends camelCase")
    # Controls how long the model will stay loaded into memory
    keep_alive: Optional[int] = Field(None, description="Controls how long the model will stay loaded into memory")
    # Additional model parameters listed in the documentation for the Modelfile such as temperature
    options: Optional[ModelParameters] = Field(None, description="Additional model parameters listed in the documentation for the Modelfile such as temperature")
    # Tools to use for the request, if any
    tools: Optional[List[Dict[str, Any]]] = Field(None, description="Tools to use for the request, if any")
    # If true, the model will think before responding, useful for complex queries
    think: Optional[bool] = Field(None, description="If true, the model will think before responding, useful for complex queries")

    class Config:
        extra = "ignore"