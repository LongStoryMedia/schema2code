# Code generated by schema2code at 2025-08-26 22:17:45. DO NOT EDIT.


from typing import List, Dict, Optional, Any, Union
from datetime import datetime, date, time, timedelta
from .message import Message
from .message_content import MessageContent
from .message_content_type import MessageContentType
from .message_role import MessageRole
from .model_parameters import ModelParameters
from pydantic import BaseModel, Field, AnyUrl, EmailStr, conint, confloat



class ChatReq(BaseModel):
    """ChatReq represents a request to the Ollama API"""
    model: str = Field(..., description="Model name, used internally only to set the model name in the request to ollama based on the profile")
    """Model name, used internally only to set the model name in the request to ollama based on the profile"""
    messages: List[Message] = Field(..., description="Messages to send to the model, each message is a struct with role and content")
    """Messages to send to the model, each message is a struct with role and content"""
    stream: bool = Field(..., description="If true, the response will be streamed back as a series of events")
    """If true, the response will be streamed back as a series of events"""
    format: Optional[Dict[str, Any]] = Field(default=None, description="The format to return a response in. Format can be json or a JSON schema")
    """The format to return a response in. Format can be json or a JSON schema"""
    conversation_id: Optional[int] = Field(default=None, description="UI sends camelCase")
    """UI sends camelCase"""
    keep_alive: Optional[int] = Field(default=None, description="Controls how long the model will stay loaded into memory")
    """Controls how long the model will stay loaded into memory"""
    options: Optional[ModelParameters] = Field(default=None, description="Additional model parameters listed in the documentation for the Modelfile such as temperature")
    """Additional model parameters listed in the documentation for the Modelfile such as temperature"""
    tools: Optional[List[Dict[str, Any]]] = Field(default=None, description="Tools to use for the request, if any")
    """Tools to use for the request, if any"""
    think: Optional[bool] = Field(default=None, description="If true, the model will think before responding, useful for complex queries")
    """If true, the model will think before responding, useful for complex queries"""

    class Config:
        extra = "ignore"