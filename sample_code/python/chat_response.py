# Code generated by schema2code at 2025-08-03 11:47:09. DO NOT EDIT.


from typing import List, Dict, Optional, Any, Union
from datetime import datetime, date, time, timedelta
from .message import Message
from pydantic import BaseModel, Field, AnyUrl, EmailStr



"""ChatResponse represents a response from the chat API"""
class ChatResponse(BaseModel):
    # Indicates whether the generation is complete
    done: bool = Field(..., description="Indicates whether the generation is complete")
    # The message content and metadata returned by the model
    message: Optional[Message] = Field(None, description="The message content and metadata returned by the model")
    # Timestamp when the response was created
    created_at: datetime = Field(..., description="Timestamp when the response was created")
    # The name or identifier of the model used for generation
    model: str = Field(..., description="The name or identifier of the model used for generation")
    # Array of numbers representing the tokenized context
    context: Optional[List[float]] = Field(None, description="Array of numbers representing the tokenized context")
    # Specific indicator of how or why the generation finished
    finish_reason: Optional[str] = Field(None, description="Specific indicator of how or why the generation finished")
    # Total time taken for the entire generation process in milliseconds
    total_duration: Optional[float] = Field(None, description="Total time taken for the entire generation process in milliseconds")
    # Time taken to load the model in milliseconds
    load_duration: Optional[float] = Field(None, description="Time taken to load the model in milliseconds")
    # Number of tokens in the prompt that were evaluated
    prompt_eval_count: Optional[float] = Field(None, description="Number of tokens in the prompt that were evaluated")
    # Time taken to evaluate the prompt tokens in milliseconds
    prompt_eval_duration: Optional[float] = Field(None, description="Time taken to evaluate the prompt tokens in milliseconds")
    # Total number of tokens evaluated
    eval_count: Optional[float] = Field(None, description="Total number of tokens evaluated")
    # Time taken for token evaluation in milliseconds
    eval_duration: Optional[float] = Field(None, description="Time taken for token evaluation in milliseconds")

    class Config:
        extra = "ignore"