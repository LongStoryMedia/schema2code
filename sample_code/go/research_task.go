// Code generated by schema2code at 2025-08-03 11:47:28. DO NOT EDIT.

package schema

import (
	"time"
)



// ResearchTaskStatus Current status of the research task
type ResearchTaskStatus string

const (
	ResearchTaskStatusPENDING ResearchTaskStatus = "PENDING"
	ResearchTaskStatusPLANNING ResearchTaskStatus = "PLANNING"
	ResearchTaskStatusGATHERING ResearchTaskStatus = "GATHERING"
	ResearchTaskStatusPROCESSING ResearchTaskStatus = "PROCESSING"
	ResearchTaskStatusSYNTHESIZING ResearchTaskStatus = "SYNTHESIZING"
	ResearchTaskStatusCOMPLETED ResearchTaskStatus = "COMPLETED"
	ResearchTaskStatusFAILED ResearchTaskStatus = "FAILED"
	ResearchTaskStatusCANCELED ResearchTaskStatus = "CANCELED"
)
// ResearchTask ResearchTask represents a deep research task
type ResearchTask struct {
	ID             int         `json:"id" yaml:"id"` // Unique identifier for the research task
	UserID         string      `json:"user_id" yaml:"user_id"` // Id of the user who owns the task
	Query          string      `json:"query" yaml:"query"` // Original research query
	Model          string      `json:"model" yaml:"model"` // Model used for the research
	ConversationID interface{} `json:"conversation_id" yaml:"conversation_id"` // Id of the conversation associated with this task if any
	Status         ResearchTaskStatus `json:"status" yaml:"status"` // Current status of the research task
	ErrorMessage   interface{} `json:"error_message" yaml:"error_message"` // Error message if task failed
	Plan           *string     `json:"plan" yaml:"plan"` // Research plan with sub-questions
	Results        []string    `json:"results" yaml:"results"` // Collected results from the research
	CreatedAt      time.Time   `json:"created_at" yaml:"created_at"` // Timestamp of when the task was created
	UpdatedAt      time.Time   `json:"updated_at" yaml:"updated_at"` // Timestamp of when the task was last updated
	CompletedAt    interface{} `json:"completed_at" yaml:"completed_at"` // Timestamp of when the task was completed
}
