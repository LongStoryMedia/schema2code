// Code generated by schema2code at 2025-08-03 11:47:19. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable enable

namespace SchemaTypes
{
    /// <summary>
    /// ChatReq represents a request to the Ollama API
    /// </summary>
    public class ChatReq
    {
        /// <summary>
        /// Model name, used internally only to set the model name in the request to ollama based on the profile
        /// </summary>
        [JsonPropertyName("model")]
        public string Model { get; set; } = default!;
        /// <summary>
        /// Messages to send to the model, each message is a struct with role and content
        /// </summary>
        [JsonPropertyName("messages")]
        public List<Message> Messages { get; set; } = default!;
        /// <summary>
        /// If true, the response will be streamed back as a series of events
        /// </summary>
        [JsonPropertyName("stream")]
        public bool Stream { get; set; } = default!;
        /// <summary>
        /// The format to return a response in. Format can be json or a JSON schema
        /// </summary>
        [JsonPropertyName("format")]
        public Dictionary<string, object>? Format { get; set; }
        /// <summary>
        /// UI sends camelCase
        /// </summary>
        [JsonPropertyName("conversation_id")]
        public long? ConversationId { get; set; }
        /// <summary>
        /// Controls how long the model will stay loaded into memory
        /// </summary>
        [JsonPropertyName("keep_alive")]
        public long? KeepAlive { get; set; }
        /// <summary>
        /// Additional model parameters listed in the documentation for the Modelfile such as temperature
        /// </summary>
        [JsonPropertyName("options")]
        public ModelParameters? Options { get; set; }
        /// <summary>
        /// Tools to use for the request, if any
        /// </summary>
        [JsonPropertyName("tools")]
        public List<Dictionary<string, object>>? Tools { get; set; }
        /// <summary>
        /// If true, the model will think before responding, useful for complex queries
        /// </summary>
        [JsonPropertyName("think")]
        public bool? Think { get; set; }
    }
}