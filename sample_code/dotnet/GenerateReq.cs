// Code generated by schema2code at 2025-08-03 11:47:20. DO NOT EDIT.

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable enable

namespace SchemaTypes
{
    /// <summary>
    /// GenerateReq represents a request to the Ollama embeddings API
    /// </summary>
    public class GenerateReq
    {
        /// <summary>
        /// Model name
        /// </summary>
        [JsonPropertyName("model")]
        public string Model { get; set; } = default!;
        /// <summary>
        /// Prompt to send to the model
        /// </summary>
        [JsonPropertyName("prompt")]
        public string Prompt { get; set; } = default!;
        /// <summary>
        /// Suffix to append to the prompt
        /// </summary>
        [JsonPropertyName("suffix")]
        public string? Suffix { get; set; }
        /// <summary>
        /// Images to include with the prompt
        /// </summary>
        [JsonPropertyName("images")]
        public List<string>? Images { get; set; }
        /// <summary>
        /// The format to return a response in. Format can be json or a JSON schema
        /// </summary>
        [JsonPropertyName("format")]
        public Dictionary<string, object>? Format { get; set; }
        /// <summary>
        /// Additional model parameters listed in the documentation for the Modelfile such as temperature
        /// </summary>
        [JsonPropertyName("options")]
        public ModelParameters? Options { get; set; }
        /// <summary>
        /// System message to (overrides what is defined in the Modelfile)
        /// </summary>
        [JsonPropertyName("system")]
        public string? System { get; set; }
        /// <summary>
        /// The prompt template to use (overrides what is defined in the Modelfile)
        /// </summary>
        [JsonPropertyName("template")]
        public string? Template { get; set; }
        /// <summary>
        /// If false the response will be returned as a single response object
        /// </summary>
        [JsonPropertyName("stream")]
        public bool? Stream { get; set; }
        /// <summary>
        /// If true no formatting will be applied to the prompt
        /// </summary>
        [JsonPropertyName("raw")]
        public bool? Raw { get; set; }
        /// <summary>
        /// Controls how long the model will stay loaded into memory
        /// </summary>
        [JsonPropertyName("keep_alive")]
        public long? KeepAlive { get; set; }
        /// <summary>
        /// the context parameter returned from a previous request
        /// </summary>
        [JsonPropertyName("context")]
        public string? Context { get; set; }
        /// <summary>
        /// If true, the model will think before responding, useful for complex queries
        /// </summary>
        [JsonPropertyName("think")]
        public bool? Think { get; set; }
    }
}